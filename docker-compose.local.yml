services:
  postgres:
    image: postgres:15-alpine
    container_name: library_postgres
    environment:
      POSTGRES_DB: ${DB_NAME:-librarydb}
      POSTGRES_USER: ${DB_USER:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - library_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-postgres}"]
      interval: 30s
      timeout: 10s
      retries: 3

  backend:
    build: ./backend
    container_name: library_backend
    ports:
      - "${PORT:-8080}:${PORT:-8080}"
    environment:
      DB_HOST: postgres
      DB_PORT: ${DB_PORT:-5432}
      DB_USER: ${DB_USER:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-password}
      DB_NAME: ${DB_NAME:-librarydb}
      DB_SSLMODE: ${DB_SSLMODE:-disable}
      PORT: ${PORT:-8080}
      LOG_LEVEL: ${LOG_LEVEL:-info}
      APP_ENV: ${APP_ENV:-development}
      APP_VERSION: ${APP_VERSION:-1.0.0}
      ALLOWED_ORIGINS: ${ALLOWED_ORIGINS:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - library_network
    restart: unless-stopped

  frontend:
    build: ./frontend
    container_name: library_frontend
    ports:
      - "3000:80"
    environment:
      REACT_APP_API_URL: ${REACT_APP_API_URL:-http://localhost:8080/api/v1}
    depends_on:
      - backend
    networks:
      - library_network
    restart: unless-stopped

volumes:
  postgres_data:

networks:
  library_network:
    driver: bridge
